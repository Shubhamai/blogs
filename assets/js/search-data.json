{
  
    
        "post0": {
            "title": "Data Exploration and Visualisations",
            "content": "# This Python 3 environment comes with many helpful analytics libraries installed # It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python # For example, here&#39;s several helpful packages to load in import numpy as np # linear algebra import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv) # Input data files are available in the &quot;../input/&quot; directory. # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory import os for dirname, _, filenames in os.walk(&#39;/kaggle/input&#39;): for filename in filenames: print(os.path.join(dirname, filename)) # Any results you write to the current directory are saved as output. . /kaggle/input/novel-corona-virus-2019-dataset/time_series_covid_19_recovered.csv /kaggle/input/novel-corona-virus-2019-dataset/time_series_covid_19_deaths.csv /kaggle/input/novel-corona-virus-2019-dataset/time_series_covid_19_confirmed.csv /kaggle/input/novel-corona-virus-2019-dataset/COVID19_open_line_list.csv /kaggle/input/novel-corona-virus-2019-dataset/COVID19_line_list_data.csv /kaggle/input/novel-corona-virus-2019-dataset/covid_19_data.csv /kaggle/input/novel-corona-virus-2019-dataset/time_series_covid_19_deaths_US.csv /kaggle/input/novel-corona-virus-2019-dataset/time_series_covid_19_confirmed_US.csv . #Importing Necessary Libraries import matplotlib.pyplot as plt import plotly.graph_objects as go import seaborn as sns import plotly import plotly.express as px from fbprophet.plot import plot_plotly from fbprophet import Prophet . #Setting up plotly from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot, plot_mpl import plotly.offline as py init_notebook_mode(connected=True) . # Reading dataset dataset = pd.read_csv(&quot;../input/novel-corona-virus-2019-dataset/covid_19_data.csv&quot;) . dataset . SNo ObservationDate Province/State Country/Region Last Update Confirmed Deaths Recovered . 0 1 | 01/22/2020 | Anhui | Mainland China | 1/22/2020 17:00 | 1.0 | 0.0 | 0.0 | . 1 2 | 01/22/2020 | Beijing | Mainland China | 1/22/2020 17:00 | 14.0 | 0.0 | 0.0 | . 2 3 | 01/22/2020 | Chongqing | Mainland China | 1/22/2020 17:00 | 6.0 | 0.0 | 0.0 | . 3 4 | 01/22/2020 | Fujian | Mainland China | 1/22/2020 17:00 | 1.0 | 0.0 | 0.0 | . 4 5 | 01/22/2020 | Gansu | Mainland China | 1/22/2020 17:00 | 0.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 10979 10980 | 04/01/2020 | Wyoming | US | 2020-04-01 22:04:58 | 130.0 | 0.0 | 0.0 | . 10980 10981 | 04/01/2020 | Xinjiang | Mainland China | 2020-04-01 22:04:58 | 76.0 | 3.0 | 73.0 | . 10981 10982 | 04/01/2020 | Yukon | Canada | 2020-04-01 22:04:58 | 5.0 | 0.0 | 0.0 | . 10982 10983 | 04/01/2020 | Yunnan | Mainland China | 2020-04-01 22:04:58 | 182.0 | 2.0 | 172.0 | . 10983 10984 | 04/01/2020 | Zhejiang | Mainland China | 2020-04-01 22:04:58 | 1257.0 | 1.0 | 1226.0 | . 10984 rows × 8 columns . Data Exploration . # Checking if there is any null values dataset.isnull().any() . SNo False ObservationDate False Province/State True Country/Region False Last Update False Confirmed False Deaths False Recovered False dtype: bool . # Seeing the datset with null rows dataset[dataset.isnull().any(axis=1)] . SNo ObservationDate Province/State Country/Region Last Update Confirmed Deaths Recovered . 35 36 | 01/22/2020 | NaN | Japan | 1/22/2020 17:00 | 2.0 | 0.0 | 0.0 | . 36 37 | 01/22/2020 | NaN | Thailand | 1/22/2020 17:00 | 2.0 | 0.0 | 0.0 | . 37 38 | 01/22/2020 | NaN | South Korea | 1/22/2020 17:00 | 1.0 | 0.0 | 0.0 | . 73 74 | 01/23/2020 | NaN | Japan | 1/23/20 17:00 | 1.0 | 0.0 | 0.0 | . 74 75 | 01/23/2020 | NaN | Thailand | 1/23/20 17:00 | 3.0 | 0.0 | 0.0 | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 10842 10843 | 04/01/2020 | NaN | Venezuela | 2020-04-01 22:04:58 | 143.0 | 3.0 | 41.0 | . 10843 10844 | 04/01/2020 | NaN | Vietnam | 2020-04-01 22:04:58 | 218.0 | 0.0 | 63.0 | . 10844 10845 | 04/01/2020 | NaN | West Bank and Gaza | 2020-04-01 22:04:58 | 134.0 | 1.0 | 18.0 | . 10845 10846 | 04/01/2020 | NaN | Zambia | 2020-04-01 22:04:58 | 36.0 | 0.0 | 0.0 | . 10846 10847 | 04/01/2020 | NaN | Zimbabwe | 2020-04-01 22:04:58 | 8.0 | 1.0 | 0.0 | . 5132 rows × 8 columns . # Affected Countries print(f&quot;Affected Countries are : {dataset[&#39;Country/Region&#39;].unique()}&quot;) print(f&quot;Total Affected Countries are : {len(dataset[&#39;Country/Region&#39;].unique())}&quot;) . Affected Countries are : [&#39;Mainland China&#39; &#39;Hong Kong&#39; &#39;Macau&#39; &#39;Taiwan&#39; &#39;US&#39; &#39;Japan&#39; &#39;Thailand&#39; &#39;South Korea&#39; &#39;Singapore&#39; &#39;Philippines&#39; &#39;Malaysia&#39; &#39;Vietnam&#39; &#39;Australia&#39; &#39;Mexico&#39; &#39;Brazil&#39; &#39;Colombia&#39; &#39;France&#39; &#39;Nepal&#39; &#39;Canada&#39; &#39;Cambodia&#39; &#39;Sri Lanka&#39; &#39;Ivory Coast&#39; &#39;Germany&#39; &#39;Finland&#39; &#39;United Arab Emirates&#39; &#39;India&#39; &#39;Italy&#39; &#39;UK&#39; &#39;Russia&#39; &#39;Sweden&#39; &#39;Spain&#39; &#39;Belgium&#39; &#39;Others&#39; &#39;Egypt&#39; &#39;Iran&#39; &#39;Israel&#39; &#39;Lebanon&#39; &#39;Iraq&#39; &#39;Oman&#39; &#39;Afghanistan&#39; &#39;Bahrain&#39; &#39;Kuwait&#39; &#39;Austria&#39; &#39;Algeria&#39; &#39;Croatia&#39; &#39;Switzerland&#39; &#39;Pakistan&#39; &#39;Georgia&#39; &#39;Greece&#39; &#39;North Macedonia&#39; &#39;Norway&#39; &#39;Romania&#39; &#39;Denmark&#39; &#39;Estonia&#39; &#39;Netherlands&#39; &#39;San Marino&#39; &#39; Azerbaijan&#39; &#39;Belarus&#39; &#39;Iceland&#39; &#39;Lithuania&#39; &#39;New Zealand&#39; &#39;Nigeria&#39; &#39;North Ireland&#39; &#39;Ireland&#39; &#39;Luxembourg&#39; &#39;Monaco&#39; &#39;Qatar&#39; &#39;Ecuador&#39; &#39;Azerbaijan&#39; &#39;Czech Republic&#39; &#39;Armenia&#39; &#39;Dominican Republic&#39; &#39;Indonesia&#39; &#39;Portugal&#39; &#39;Andorra&#39; &#39;Latvia&#39; &#39;Morocco&#39; &#39;Saudi Arabia&#39; &#39;Senegal&#39; &#39;Argentina&#39; &#39;Chile&#39; &#39;Jordan&#39; &#39;Ukraine&#39; &#39;Saint Barthelemy&#39; &#39;Hungary&#39; &#39;Faroe Islands&#39; &#39;Gibraltar&#39; &#39;Liechtenstein&#39; &#39;Poland&#39; &#39;Tunisia&#39; &#39;Palestine&#39; &#39;Bosnia and Herzegovina&#39; &#39;Slovenia&#39; &#39;South Africa&#39; &#39;Bhutan&#39; &#39;Cameroon&#39; &#39;Costa Rica&#39; &#39;Peru&#39; &#39;Serbia&#39; &#39;Slovakia&#39; &#39;Togo&#39; &#39;Vatican City&#39; &#39;French Guiana&#39; &#39;Malta&#39; &#39;Martinique&#39; &#39;Republic of Ireland&#39; &#39;Bulgaria&#39; &#39;Maldives&#39; &#39;Bangladesh&#39; &#39;Moldova&#39; &#39;Paraguay&#39; &#39;Albania&#39; &#39;Cyprus&#39; &#39;St. Martin&#39; &#39;Brunei&#39; &#39;occupied Palestinian territory&#39; &#34;(&#39;St. Martin&#39;,)&#34; &#39;Burkina Faso&#39; &#39;Channel Islands&#39; &#39;Holy See&#39; &#39;Mongolia&#39; &#39;Panama&#39; &#39;Bolivia&#39; &#39;Honduras&#39; &#39;Congo (Kinshasa)&#39; &#39;Jamaica&#39; &#39;Reunion&#39; &#39;Turkey&#39; &#39;Cuba&#39; &#39;Guyana&#39; &#39;Kazakhstan&#39; &#39;Cayman Islands&#39; &#39;Guadeloupe&#39; &#39;Ethiopia&#39; &#39;Sudan&#39; &#39;Guinea&#39; &#39;Antigua and Barbuda&#39; &#39;Aruba&#39; &#39;Kenya&#39; &#39;Uruguay&#39; &#39;Ghana&#39; &#39;Jersey&#39; &#39;Namibia&#39; &#39;Seychelles&#39; &#39;Trinidad and Tobago&#39; &#39;Venezuela&#39; &#39;Curacao&#39; &#39;Eswatini&#39; &#39;Gabon&#39; &#39;Guatemala&#39; &#39;Guernsey&#39; &#39;Mauritania&#39; &#39;Rwanda&#39; &#39;Saint Lucia&#39; &#39;Saint Vincent and the Grenadines&#39; &#39;Suriname&#39; &#39;Kosovo&#39; &#39;Central African Republic&#39; &#39;Congo (Brazzaville)&#39; &#39;Equatorial Guinea&#39; &#39;Uzbekistan&#39; &#39;Guam&#39; &#39;Puerto Rico&#39; &#39;Benin&#39; &#39;Greenland&#39; &#39;Liberia&#39; &#39;Mayotte&#39; &#39;Republic of the Congo&#39; &#39;Somalia&#39; &#39;Tanzania&#39; &#39;The Bahamas&#39; &#39;Barbados&#39; &#39;Montenegro&#39; &#39;The Gambia&#39; &#39;Kyrgyzstan&#39; &#39;Mauritius&#39; &#39;Zambia&#39; &#39;Djibouti&#39; &#39;Gambia, The&#39; &#39;Bahamas, The&#39; &#39;Chad&#39; &#39;El Salvador&#39; &#39;Fiji&#39; &#39;Nicaragua&#39; &#39;Madagascar&#39; &#39;Haiti&#39; &#39;Angola&#39; &#39;Cabo Verde&#39; &#39;Niger&#39; &#39;Papua New Guinea&#39; &#39;Zimbabwe&#39; &#39;Cape Verde&#39; &#39;East Timor&#39; &#39;Eritrea&#39; &#39;Uganda&#39; &#39;Bahamas&#39; &#39;Dominica&#39; &#39;Gambia&#39; &#39;Grenada&#39; &#39;Mozambique&#39; &#39;Syria&#39; &#39;Timor-Leste&#39; &#39;Belize&#39; &#39;Laos&#39; &#39;Libya&#39; &#39;Diamond Princess&#39; &#39;Guinea-Bissau&#39; &#39;Mali&#39; &#39;Saint Kitts and Nevis&#39; &#39;West Bank and Gaza&#39; &#39;Burma&#39; &#39;MS Zaandam&#39; &#39;Botswana&#39; &#39;Burundi&#39; &#39;Sierra Leone&#39;] Total Affected Countries are : 215 . # Affected States/Provinces print(f&quot;Affected State/Provinces are : {dataset[&#39;Province/State&#39;].unique()}&quot;) print(f&quot;Total Affected State/Provinces are : {len(dataset[&#39;Province/State&#39;].unique())}&quot;) . Affected State/Provinces are : [&#39;Anhui&#39; &#39;Beijing&#39; &#39;Chongqing&#39; &#39;Fujian&#39; &#39;Gansu&#39; &#39;Guangdong&#39; &#39;Guangxi&#39; &#39;Guizhou&#39; &#39;Hainan&#39; &#39;Hebei&#39; &#39;Heilongjiang&#39; &#39;Henan&#39; &#39;Hong Kong&#39; &#39;Hubei&#39; &#39;Hunan&#39; &#39;Inner Mongolia&#39; &#39;Jiangsu&#39; &#39;Jiangxi&#39; &#39;Jilin&#39; &#39;Liaoning&#39; &#39;Macau&#39; &#39;Ningxia&#39; &#39;Qinghai&#39; &#39;Shaanxi&#39; &#39;Shandong&#39; &#39;Shanghai&#39; &#39;Shanxi&#39; &#39;Sichuan&#39; &#39;Taiwan&#39; &#39;Tianjin&#39; &#39;Tibet&#39; &#39;Washington&#39; &#39;Xinjiang&#39; &#39;Yunnan&#39; &#39;Zhejiang&#39; nan &#39;Chicago&#39; &#39;Illinois&#39; &#39;California&#39; &#39;Arizona&#39; &#39;Ontario&#39; &#39;New South Wales&#39; &#39;Victoria&#39; &#39;British Columbia&#39; &#39;Bavaria&#39; &#39;Queensland&#39; &#39;Chicago, IL&#39; &#39;South Australia&#39; &#39;Boston, MA&#39; &#39;Los Angeles, CA&#39; &#39;Orange, CA&#39; &#39;Santa Clara, CA&#39; &#39;Seattle, WA&#39; &#39;Tempe, AZ&#39; &#39;San Benito, CA&#39; &#39;Toronto, ON&#39; &#39;London, ON&#39; &#39;Madison, WI&#39; &#39;Cruise Ship&#39; &#39;Diamond Princess cruise ship&#39; &#39;San Diego County, CA&#39; &#39;San Antonio, TX&#39; &#39;Ashland, NE&#39; &#39;Travis, CA&#39; &#39;From Diamond Princess&#39; &#39;Lackland, TX&#39; &#39;None&#39; &#39;Humboldt County, CA&#39; &#39;Sacramento County, CA&#39; &#39;Omaha, NE (From Diamond Princess)&#39; &#39;Travis, CA (From Diamond Princess)&#39; &#39;Lackland, TX (From Diamond Princess)&#39; &#39;Unassigned Location (From Diamond Princess)&#39; &#39; Montreal, QC&#39; &#39;Western Australia&#39; &#39;Portland, OR&#39; &#39;Snohomish County, WA&#39; &#39;Providence, RI&#39; &#39;King County, WA&#39; &#39;Cook County, IL&#39; &#39;Tasmania&#39; &#39;Grafton County, NH&#39; &#39;Hillsborough, FL&#39; &#39;New York City, NY&#39; &#39;Placer County, CA&#39; &#39;San Mateo, CA&#39; &#39;Sarasota, FL&#39; &#39;Sonoma County, CA&#39; &#39;Umatilla, OR&#39; &#39;Fulton County, GA&#39; &#39;Washington County, OR&#39; &#39; Norfolk County, MA&#39; &#39;Berkeley, CA&#39; &#39;Maricopa County, AZ&#39; &#39;Wake County, NC&#39; &#39;Westchester County, NY&#39; &#39;Orange County, CA&#39; &#39;Northern Territory&#39; &#39;Contra Costa County, CA&#39; &#39;Bergen County, NJ&#39; &#39;Harris County, TX&#39; &#39;San Francisco County, CA&#39; &#39;Clark County, NV&#39; &#39;Fort Bend County, TX&#39; &#39;Grant County, WA&#39; &#39;Queens County, NY&#39; &#39;Santa Rosa County, FL&#39; &#39;Williamson County, TN&#39; &#39;New York County, NY&#39; &#39;Unassigned Location, WA&#39; &#39;Montgomery County, MD&#39; &#39;Suffolk County, MA&#39; &#39;Denver County, CO&#39; &#39;Summit County, CO&#39; &#39;Calgary, Alberta&#39; &#39;Chatham County, NC&#39; &#39;Delaware County, PA&#39; &#39;Douglas County, NE&#39; &#39;Fayette County, KY&#39; &#39;Floyd County, GA&#39; &#39;Marion County, IN&#39; &#39;Middlesex County, MA&#39; &#39;Nassau County, NY&#39; &#39;Norwell County, MA&#39; &#39;Ramsey County, MN&#39; &#39;Washoe County, NV&#39; &#39;Wayne County, PA&#39; &#39;Yolo County, CA&#39; &#39;Santa Clara County, CA&#39; &#39;Grand Princess Cruise Ship&#39; &#39;Douglas County, CO&#39; &#39;Providence County, RI&#39; &#39;Alameda County, CA&#39; &#39;Broward County, FL&#39; &#39;Fairfield County, CT&#39; &#39;Lee County, FL&#39; &#39;Pinal County, AZ&#39; &#39;Rockland County, NY&#39; &#39;Saratoga County, NY&#39; &#39;Edmonton, Alberta&#39; &#39;Charleston County, SC&#39; &#39;Clark County, WA&#39; &#39;Cobb County, GA&#39; &#39;Davis County, UT&#39; &#39;El Paso County, CO&#39; &#39;Honolulu County, HI&#39; &#39;Jackson County, OR &#39; &#39;Jefferson County, WA&#39; &#39;Kershaw County, SC&#39; &#39;Klamath County, OR&#39; &#39;Madera County, CA&#39; &#39;Pierce County, WA&#39; &#39;Plymouth County, MA&#39; &#39;Santa Cruz County, CA&#39; &#39;Tulsa County, OK&#39; &#39;Montgomery County, TX&#39; &#39;Norfolk County, MA&#39; &#39;Montgomery County, PA&#39; &#39;Fairfax County, VA&#39; &#39;Rockingham County, NH&#39; &#39;Washington, D.C.&#39; &#39;Berkshire County, MA&#39; &#39;Davidson County, TN&#39; &#39;Douglas County, OR&#39; &#39;Fresno County, CA&#39; &#39;Harford County, MD&#39; &#39;Hendricks County, IN&#39; &#39;Hudson County, NJ&#39; &#39;Johnson County, KS&#39; &#39;Kittitas County, WA&#39; &#39;Manatee County, FL&#39; &#39;Marion County, OR&#39; &#39;Okaloosa County, FL&#39; &#39;Polk County, GA&#39; &#39;Riverside County, CA&#39; &#39;Shelby County, TN&#39; &#39;Spokane County, WA&#39; &#39;St. Louis County, MO&#39; &#39;Suffolk County, NY&#39; &#39;Ulster County, NY&#39; &#39;Unassigned Location, VT&#39; &#39;Unknown Location, MA&#39; &#39;Volusia County, FL&#39; &#39;Alberta&#39; &#39;Quebec&#39; &#39;Johnson County, IA&#39; &#39;Harrison County, KY&#39; &#39;Bennington County, VT&#39; &#39;Carver County, MN&#39; &#39;Charlotte County, FL&#39; &#39;Cherokee County, GA&#39; &#39;Collin County, TX&#39; &#39;Jefferson County, KY&#39; &#39;Jefferson Parish, LA&#39; &#39;Shasta County, CA&#39; &#39;Spartanburg County, SC&#39; &#39;New York&#39; &#39;Massachusetts&#39; &#39;Grand Princess&#39; &#39;Georgia&#39; &#39;Colorado&#39; &#39;Florida&#39; &#39;New Jersey&#39; &#39;Oregon&#39; &#39;Texas&#39; &#39;Pennsylvania&#39; &#39;Iowa&#39; &#39;Maryland&#39; &#39;North Carolina&#39; &#39;South Carolina&#39; &#39;Tennessee&#39; &#39;Virginia&#39; &#39;Indiana&#39; &#39;Kentucky&#39; &#39;District of Columbia&#39; &#39;Nevada&#39; &#39;New Hampshire&#39; &#39;Minnesota&#39; &#39;Nebraska&#39; &#39;Ohio&#39; &#39;Rhode Island&#39; &#39;Wisconsin&#39; &#39;Connecticut&#39; &#39;Hawaii&#39; &#39;Oklahoma&#39; &#39;Utah&#39; &#39;Kansas&#39; &#39;Louisiana&#39; &#39;Missouri&#39; &#39;Vermont&#39; &#39;Alaska&#39; &#39;Arkansas&#39; &#39;Delaware&#39; &#39;Idaho&#39; &#39;Maine&#39; &#39;Michigan&#39; &#39;Mississippi&#39; &#39;Montana&#39; &#39;New Mexico&#39; &#39;North Dakota&#39; &#39;South Dakota&#39; &#39;West Virginia&#39; &#39;Wyoming&#39; &#39;France&#39; &#39;UK&#39; &#39;Denmark&#39; &#39;Faroe Islands&#39; &#39;St Martin&#39; &#39;Channel Islands&#39; &#39;New Brunswick&#39; &#39;Saint Barthelemy&#39; &#39;Gibraltar&#39; &#39;Australian Capital Territory&#39; &#39;United Kingdom&#39; &#39;French Polynesia&#39; &#39;Manitoba&#39; &#39;Saskatchewan&#39; &#39;Alabama&#39; &#39;Fench Guiana&#39; &#39;Puerto Rico&#39; &#39;Virgin Islands, U.S.&#39; &#39;French Guiana&#39; &#39;Guam&#39; &#39;Newfoundland and Labrador&#39; &#39;Prince Edward Island&#39; &#39;Mayotte&#39; &#39;Netherlands&#39; &#39;Nova Scotia&#39; &#39;Guadeloupe&#39; &#39;Curacao&#39; &#39;Virgin Islands&#39; &#39;Cayman Islands&#39; &#39;Reunion&#39; &#39;Aruba&#39; &#39;United States Virgin Islands&#39; &#39;US&#39; &#39;Montserrat&#39; &#39;Greenland&#39; &#39;New Caledonia&#39; &#39;Bermuda&#39; &#39;Sint Maarten&#39; &#39;Isle of Man&#39; &#39;Northwest Territories&#39; &#39;American Samoa&#39; &#39;External territories&#39; &#39;Jervis Bay Territory&#39; &#39;Martinique&#39; &#39;Northern Mariana Islands&#39; &#39;Wuhan Evacuee&#39; &#39;Recovered&#39; &#39;Yukon&#39; &#39;Anguilla&#39; &#39;British Virgin Islands&#39; &#39;Turks and Caicos Islands&#39;] Total Affected State/Provinces are : 294 . Dataset Visualisations . Bar Plots . Confirmed Visualisations . Different Color shows different Country . fig = px.bar(dataset, x=&#39;ObservationDate&#39;, y=&#39;Confirmed&#39;, hover_data=[&#39;Province/State&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;], color=&#39;Country/Region&#39;) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Confirmed bar plot for each country&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . Here taking Mainland Chine as an example and different color shows different State/Provinces . fig = px.bar(dataset.loc[dataset[&#39;Country/Region&#39;] == &#39;Mainland China&#39;], x=&#39;ObservationDate&#39;, y=&#39;Confirmed&#39;, hover_data=[&#39;Province/State&#39;, &#39;Deaths&#39;, &#39;Recovered&#39;], color=&#39;Province/State&#39;) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Confirmed bar plot for Mainland China&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . # Saving the image py.plot(fig, filename=&#39;Confirmed_plot.html&#39;) . &#39;Confirmed_plot.html&#39; . Death Visualisations . fig = px.bar(dataset, x=&#39;ObservationDate&#39;, y=&#39;Deaths&#39;, hover_data=[&#39;Province/State&#39;, &#39;Confirmed&#39;, &#39;Recovered&#39;], color=&#39;Country/Region&#39;) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Death bar plot for each country&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . fig = px.bar(dataset.loc[dataset[&#39;Country/Region&#39;] == &#39;Mainland China&#39;], x=&#39;ObservationDate&#39;, y=&#39;Deaths&#39;, hover_data=[&#39;Province/State&#39;, &#39;Confirmed&#39;, &#39;Recovered&#39;], color=&#39;Province/State&#39;) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Death bar plot for Mainland China&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . Line Plots . Confirmed PLots . fig = px.line(dataset, x=&quot;ObservationDate&quot;, y=&quot;Confirmed&quot;, color=&#39;Country/Region&#39;, hover_data=[&#39;Province/State&#39;, &#39;Deaths&#39;]) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Confirmed Plot for each Country&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . Deaths Plots . fig = px.line(dataset, x=&quot;ObservationDate&quot;, y=&quot;Deaths&quot;, color=&#39;Country/Region&#39;, hover_data=[&#39;Province/State&#39;, &#39;Deaths&#39;]) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Death plot for each country&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . Showing Death&#39;s of total countries . Grouping Dataset by Date . fig = px.line(pd.DataFrame(dataset.groupby(&#39;ObservationDate&#39;)[&#39;Confirmed&#39;].sum().reset_index()), x=&quot;ObservationDate&quot;, y=&quot;Confirmed&quot;) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Showing Deaths of total country&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . The cases are increasing at very high rate ! . Maps Visualisations . A special thansk for Ranjith KS whose kernel helped me a lot to complete this map visualisation part, most of the code here is of her . pxdf = px.data.gapminder() country_isoAlpha = pxdf[[&#39;country&#39;, &#39;iso_alpha&#39;]].drop_duplicates() country_isoAlpha.rename(columns = {&#39;country&#39;:&#39;Country&#39;}, inplace=True) country_isoAlpha.set_index(&#39;Country&#39;, inplace=True) country_map = country_isoAlpha.to_dict(&#39;index&#39;) . def getCountryIsoAlpha(country): try: return country_map[country][&#39;iso_alpha&#39;] except: return country . dataset.replace({&#39;Country/Region&#39;: &#39;Mainland China&#39;}, &#39;China&#39;, inplace=True) dataset[&#39;iso_alpha&#39;] = dataset[&#39;Country/Region&#39;].apply(getCountryIsoAlpha) . Confirmed Cases Maps . df_plot = dataset.groupby(&#39;iso_alpha&#39;).max().reset_index() fig = px.choropleth(df_plot, locations=&quot;iso_alpha&quot;, color=&quot;Confirmed&quot;, hover_data=[&quot;Confirmed&quot;, &quot;Deaths&quot;, &quot;Recovered&quot;], color_continuous_scale=&quot;Viridis&quot;) fig.update_geos(fitbounds=&quot;locations&quot;, visible=True) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}, title_text = &#39;Deaths Cases in World&#39;) fig.show() . fig = px.scatter_geo(dataset, locations=&quot;iso_alpha&quot;, color=&quot;Confirmed&quot;, size=&#39;Confirmed&#39;, hover_name=&quot;Country/Region&quot;, hover_data=[&quot;Confirmed&quot;, &quot;Deaths&quot;, &quot;Recovered&quot;], projection=&quot;natural earth&quot;, animation_frame=&quot;ObservationDate&quot;) fig.show() . Deaths Cases Maps . fig = px.choropleth(df_plot, locations=&quot;iso_alpha&quot;, color=&quot;Deaths&quot;, hover_data=[&quot;Confirmed&quot;, &quot;Deaths&quot;, &quot;Recovered&quot;], color_continuous_scale=&quot;Viridis&quot;) fig.update_geos(fitbounds=&quot;locations&quot;, visible=True) fig.update_layout(margin={&quot;r&quot;:0,&quot;t&quot;:0,&quot;l&quot;:0,&quot;b&quot;:0}, title_text = &#39;Deaths Cases in World&#39;) fig.show() . fig = px.scatter_geo(dataset, locations=&quot;iso_alpha&quot;, color=&quot;Deaths&quot;, size=&#39;Deaths&#39;, hover_name=&quot;Country/Region&quot;, hover_data=[&quot;Confirmed&quot;, &quot;Deaths&quot;, &quot;Recovered&quot;] , projection=&quot;natural earth&quot;, animation_frame=&quot;ObservationDate&quot;) fig.show() . Here&#39;s come Machine Learning . Prediting Confirmed and Death cases using Prophet Model . Forcasting Confirmed Cases . confirmed_training_dataset = pd.DataFrame(dataset.groupby(&#39;ObservationDate&#39;)[&#39;Confirmed&#39;].sum().reset_index()).rename(columns={&#39;ObservationDate&#39;: &#39;ds&#39;, &#39;Confirmed&#39;: &#39;y&#39;}) confirmed_training_dataset . ds y . 0 01/22/2020 | 555.0 | . 1 01/23/2020 | 653.0 | . 2 01/24/2020 | 941.0 | . 3 01/25/2020 | 1438.0 | . 4 01/26/2020 | 2118.0 | . ... ... | ... | . 66 03/28/2020 | 660706.0 | . 67 03/29/2020 | 720117.0 | . 68 03/30/2020 | 782365.0 | . 69 03/31/2020 | 857487.0 | . 70 04/01/2020 | 932605.0 | . 71 rows × 2 columns . # Making the Model prophet = Prophet() prophet.fit(confirmed_training_dataset) future = prophet.make_future_dataframe(periods=20) confirmed_forecast = prophet.predict(future) . Confirmed Cases Forcasting Visualisation . fig = plot_plotly(prophet, confirmed_forecast) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Predictions for Confirmed&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig . Forcasing Death Cases . death_training_dataset = pd.DataFrame(dataset.groupby(&#39;ObservationDate&#39;)[&#39;Deaths&#39;].sum().reset_index()).rename(columns={&#39;ObservationDate&#39;: &#39;ds&#39;, &#39;Deaths&#39;: &#39;y&#39;}) death_training_dataset . ds y . 0 01/22/2020 | 17.0 | . 1 01/23/2020 | 18.0 | . 2 01/24/2020 | 26.0 | . 3 01/25/2020 | 42.0 | . 4 01/26/2020 | 56.0 | . ... ... | ... | . 66 03/28/2020 | 30652.0 | . 67 03/29/2020 | 33925.0 | . 68 03/30/2020 | 37582.0 | . 69 03/31/2020 | 42107.0 | . 70 04/01/2020 | 46809.0 | . 71 rows × 2 columns . # Making the Model prophet = Prophet() prophet.fit(death_training_dataset) future = prophet.make_future_dataframe(periods=20) deaths_forecast = prophet.predict(future) . fig = plot_plotly(prophet, deaths_forecast) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Predictions of Deaths&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig . # Saving Death Forcasting py.plot(fig, filename=&#39;death_forcasting.html&#39;) . &#39;death_forcasting.html&#39; . Ontario status . ontario_data = dataset.loc[dataset[&#39;Province/State&#39;] == &#39;Ontario&#39;] fig = px.bar(ontario_data, x=&#39;ObservationDate&#39;, y=&#39;Confirmed&#39;, hover_data=[&#39;Deaths&#39;, &#39;Recovered&#39;]) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Confirmed bar plot for Ontario&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . ontario_data = dataset.loc[dataset[&#39;Province/State&#39;] == &#39;Ontario&#39;] fig = px.bar(ontario_data, x=&#39;ObservationDate&#39;, y=&#39;Deaths&#39;, hover_data=[&#39;Confirmed&#39;, &#39;Recovered&#39;]) annotations = [] annotations.append(dict(xref=&#39;paper&#39;, yref=&#39;paper&#39;, x=0.0, y=1.05, xanchor=&#39;left&#39;, yanchor=&#39;bottom&#39;, text=&#39;Deaths bar plot for Ontario&#39;, font=dict(family=&#39;Arial&#39;, size=30, color=&#39;rgb(37,37,37)&#39;), showarrow=False)) fig.update_layout(annotations=annotations) fig.show() . Deaths Predictions for Ontario . ontario_training_dataset = pd.DataFrame(ontario_data.groupby(&#39;ObservationDate&#39;)[&#39;Deaths&#39;].sum().reset_index()).rename(columns={&#39;ObservationDate&#39;: &#39;ds&#39;, &#39;Deaths&#39;: &#39;y&#39;}) . ontario_training_dataset . ds y . 0 01/26/2020 | 0.0 | . 1 01/27/2020 | 0.0 | . 2 01/28/2020 | 0.0 | . 3 01/29/2020 | 0.0 | . 4 01/30/2020 | 0.0 | . 5 01/31/2020 | 0.0 | . 6 02/01/2020 | 0.0 | . 7 02/02/2020 | 0.0 | . 8 02/03/2020 | 0.0 | . 9 03/09/2020 | 0.0 | . 10 03/10/2020 | 0.0 | . 11 03/11/2020 | 0.0 | . 12 03/12/2020 | 0.0 | . 13 03/13/2020 | 0.0 | . 14 03/14/2020 | 0.0 | . 15 03/15/2020 | 0.0 | . 16 03/16/2020 | 0.0 | . 17 03/17/2020 | 1.0 | . 18 03/18/2020 | 1.0 | . 19 03/19/2020 | 1.0 | . 20 03/20/2020 | 2.0 | . 21 03/21/2020 | 3.0 | . 22 03/22/2020 | 5.0 | . 23 03/23/2020 | 6.0 | . 24 03/24/2020 | 7.0 | . 25 03/25/2020 | 8.0 | . 26 03/26/2020 | 13.0 | . 27 03/27/2020 | 18.0 | . 28 03/28/2020 | 18.0 | . 29 03/29/2020 | 21.0 | . 30 03/30/2020 | 31.0 | . 31 03/31/2020 | 33.0 | . 32 04/01/2020 | 37.0 | . # Making the Model prophet = Prophet() prophet.fit(ontario_training_dataset.iloc[9:, :]) future = prophet.make_future_dataframe(periods=2) ontario_deaths_forecast = prophet.predict(future) . fig = plot_plotly(prophet, ontario_deaths_forecast) fig . I will constantly update the notebook with every updates :) .",
            "url": "https://shubhamai.github.io/blogs/2020/06/14/Melanoma-Classification.html",
            "relUrl": "/2020/06/14/Melanoma-Classification.html",
            "date": " • Jun 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://shubhamai.github.io/blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://shubhamai.github.io/blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Well, I love robotics and how Machine Learning &amp; AI can be applied to this thing, always seek to learn new stuff from quantum computing, space🌌, robotics 🤖 to the latest research in AI. . I have been Machine learning since more than a year, and currently, making all sorts of projects and products with Machine learning, Deep Learning, computer vision, Deep Reinforcement Learning and possibly Natural Language Processing, and of course, deploying them into the cloud for the world . I started programming way back when I was 14, playing with electronics and micro-controllers including Arduino, Raspberry PI, servo, LED 💡, and much more. Then it was time to upgrade, so I started learning Python and there was a lot of fun to learn a new programming language, I started learning Machine Learning way back when I was 15 years old, with Deep Learning, Computer Vision, Natural Language Processing and little Reinforcement Learning. . Currently, I have been working Self Paid and Teaching Assistant at Zero to Mastery. Helping students who are just getting started into Machine Learning &amp; AI. . My current goals are to learn the latest advancement in Machine Learning and learn Deep Reinforcement Learning at the end of this year. . My stuff is all around here and there in this website, and sure to join my Monthly Newsletter . My blogs and writing are available on Medium . @Shubhamai is my handle on Twitter . India is my home country and i am proud of that. .",
          "url": "https://shubhamai.github.io/blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://shubhamai.github.io/blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}